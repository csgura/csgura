---
layout: post
title:  "Scala 공변성(covariant)"
date:   2019-01-04 10:40:07 +0900
categories: Scala
---

저는 Scala 코딩을 하다가 +T 나 -T 만 나오면,  아무리 고쳐도 컴파일 에러가 없어지지 않고,   
아무리 이해해 보려고 노력해도 공변성에 대해서 이해가 되질 않았습니다.

그러다가 이번 기회에 좀 더 잘 이해하게 되었는데, 저와 같은 어려움을 겪는 사람이 또 있을 까 싶어서   
여기에 정리해 봅니다. 

#### 1. scala List는 상위타입의 instance를 add 할 수 있습니다.

java에서는 다음과 같은 코드는 컴파일 되지 않습니다.
```java
  ArrayList<String> ar = new ArrayList<String>();
  ar.add(10);
```

하지만 scala에서는 다음 코드가 잘 컴파일 됩니다.
```scala
  val list : List[String] = List("hello")
  val list2 = list :+ 10
```

String의 list를 만들었는데 , 이 list에 10 ( Int type )을 추가 하는 것이 가능합니다.  
결과로 리턴되는 list2의 타입은 `List[Any]` 입니다.

이해가 안가지만 , 코드를 다음과 같이 변경하면 이해가 갈 것입니다.

```scala
  val list : List[Any] = List[String]("hello")
  val list2 = list :+ 10
```

List는 공변적이기 때문에 ,   `List[String]`은 `List[Any]` 가 될 수 있습니다.  
`List[Any]` 에 10을 추가하는 것은 이상하지 않죠?


#### 2. covariant type T occurs in contravariant position 에러 해결
가장 빈번하게 발생 하는 에러 인데요.

첫번째 경우는 var 변수를 선언할 때 입니다.

```scala
class ListWrapper[+T] {
  var list = List[T]()
}
```

List의 Wrapper 를 만들고 싶은데,  List가 공변적이기 때문에 ListWrapper도 공변적으로 만들고 싶었습니다.  
하지만 컴파일이 되질 않네요.

수정하는 방법은 두가지가 있습니다.
* `var` 를 `val`로 변경
* `private[this]` 를 붙이기 

List 가 공변적일 수 있는 이유는 immutable 하기 때문입니다.  
mutable한 list라면 ( java 처럼 )  String list에 Int 를 추가하는 것이 말이 안되지만,  
immutable하기 때문에  `List[Any]`를 만들어 리턴해 줄 수 있습니다.

그렇다면 ListWrapper 도 immutable 해야 하지 않을 까요.  
var 변수를 내부에 가지고 있는 것은 적절하지 않아 보입니다.  

하지만 굳이 mutable 하게 구현하고 싶다면 'private[this]' 를 붙여 주면 됩니다.
```scala
class ListWrapper[+T] {
  private[this] var list = List[T]()
}
```
`private` 과 `private[this]` 의 차이점은  
`private` 은 ListWrapper 라는 class 레벨에서 private 한 것이어서  `equals` 같은 함수에서 
다른 인스턴스의 변수를 참조하는 것이 가능합니다.  

반면 `private[this]` 로 선언하면  인스턴스 자신만 참조 가능한 변수가 됩니다.

두번째 경우는 함수의 아규먼트로 사용할 때 입니다.

```scala
class ListWrapper[+T] {
  private[this] var list = List[T]()

  def addItem (  item : T ) : Unit = {

  }
}
```

이 경우는 scala collection library등을 살펴 보면 많이 보이기 때문에 수정하는 방법을 알기 쉽습니다.  
보통 다음과 같이 고치지요.

```scala
class ListWrapper[+T] {
  private[this] var list = List[T]()

  def addItem[ A >: T] (  item : A ) : Unit = {

  }
}
```

그런데 이렇게 고치면 `A` 는  `Any` 인 것과 마찬가지 입니다.

ListWrapper는  공변적이기 때문에 , T 의 부모 class의 instance들도 추가 가능 해야 합니다.  
처음에 설명 했듯이 `ListWrapper[String]`은 `ListWrapper[Any]` 가 될 수 있으니까요

그래서 `A>:T` 에서 컴파일러가 추론하는 타입의 범위는  T 부터 부모를 따라 올라가면서 Any 까지 입니다.

#### 3. Any가 추가 가능하다니 말도 안됩니다. String만 추가 할 수 있는 ListWrapper를 만들고 싶어요. 

implicit evidence를 이용하면 가능합니다.

```scala
class ListWrapper[+T] {

  private[this] var list : List[_ >: T] = List()
  
  def addItem [A >: T , B >: T]( a : A )(implicit ev : A <:< B): Unit = {
    list = list.::(a)
  }
}

object Main extends App {

  val wrapper = new ListWrapper[String]()
  wrapper.addItem(10)
}
```
컴파일시에 다음과 같은 에러가 발생합니다.
```
error: Cannot prove that Any <:< String.
         wrapper.addItem(10)
```

`A` 의 타입 추론은 다음과 같이 이루어 집니다.  
함수 선언에 `A >:T ` 라고 되어 있고,  addItem을 호출하는 인자의 타입이 A 라고 되어 있죠.  
addItem을 호출 하면서 인자를 10을 주었으니 , 컴파일러는 일단  `A`를  `Int` 라고 놓고 , 함수의 선언을 만족하는지 체크합니다.  
하지만 `T` 가 `String` 이니 `Int >: String` 이 성립하지 않죠.  

그래서 `Int` 의 부모타입을 이용하여 시도해 봅니다.  
`Int`의 부모타입이 `Any` 이고  `Any >: String` 이 성립하죠.  그래서 컴파일러는 `A`를 `Any`라고 추론합니다.

`B`에 대해 보겠습니다.  `B`는 `B >: T` 라고만 되어 있고, B 를 추론할 수 있는 다른 근거가 아무데도 없습니다.  
`B >: String` 을 만족하는 모든 클래스가 추론 결과가 될 수 있는데, 컴파일러는 `String` 부터 시작하여  선언을 만족하는지 보고, 
만족하지 않으면 `String`의 부모 클래스 사용하여 선언을 체크 합니다.  
이경우에 B가 `String` 이어도 아무런 문제가 없네요.  그래서 `B`는 `String` 으로 추론 됩니다.

이렇게 타입 추론을 한 후에 implicit 변수나 변환을 찾습니다.  
그런데 `Any <:< String` 타입의 변수나 변환은 존재하지 않습니다.  
그래서 컴파일 에러가 발생하게 됩니다. 


뭐 일단은 그래요. 그런데 다음 코드를 볼까요?
```scala
  val wrapper : ListWrapper[Any] = new ListWrapper[String]()
  wrapper.addItem(10)
```

컴파일이 잘 됩니다. 왠지 헛수고 했다는 생각이 드네요.

var 변수를 선언하거나 implicit evidence 로 type을 제한 하는 것은,  
공변적이라는 의미와 맞지 않아서 적절한 코드가 아닙니다.
 
저는 공변성에 대해서 `ListWrapper[String]` 타입은 `ListWrapper[Any]` 타입의 subtype 이다 라는 수준으로만 생각 했기 때문에,  
계속 말도 안되는 코드를 만드려고 했었습니다.    

대신  
> `ListWrapper가 공변적일 때 , ListWrapper[String]` 타입은 언제든지 `ListWrapper[Any]` 타입으로 바뀔 수 있다. 

라고 생각을 바꾸니까,  언제 공변형을 써야 하는지 , 특정 경우에는 왜 쓰면 안되는지에 대해서 약간 명확해졌습니다.

ListWrapper는 굳이 공변적이어야 할 이유가 없고,  공변적일 필요가 있다면 immutable 하게 구현 하는 것이 적절한 구현 방법일 것 같습니다.